plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'realm-android'
}

android {
    // namespace：注意这个不是打包的包名，而是一些自动生成的类会引用到(import package)
    namespace 'com.hawky.realm'
    compileSdk rootProject.ext.compileSdkVersion

    // 默认配置
    defaultConfig {
        applicationId "com.hawky.realm"
        minSdk 24
        targetSdk 33
        multiDexEnabled true
        flavorDimensions "brand"
    }

    // 配置签名
    signingConfigs {
        normalConfig {
            storeFile file(rootProject.ext.hawky_key_path)
            storePassword "hawky2023!"
            keyAlias "hawky"
            keyPassword "hawky2023!"
        }
    }

    // 配置编译类型
    buildTypes {
        release {
            minifyEnabled true// release版本使用混淆
            debuggable false// release不可调试
            buildConfigField "boolean", "IS_DEBUGENV", 'false'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false// debug版本不使用混淆
            buildConfigField "boolean", "IS_DEBUGENV", 'true'
        }

        // 对打包的 apk 重命名
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def fileName = "hawky_v${variant.versionName}_release_${variant.flavorName}.apk"
                if (variant.buildType.isDebuggable()) {
                    fileName = "hawky_v${variant.versionName}_debug_${variant.flavorName}.apk"
                }
                output.outputFileName = fileName
            }
        }
    }

    // 多渠道打包（applicationIdSuffix 改包名）
    // 若直接 build 打包，则会默认使用最后一个Flavor配置，apk生成路径：build/outputs/apk/huawei/
    // 若使用 签名 打包（如选择huawei），则apk生成路径 /app/huawei
    productFlavors {
        xiaomi {
            dimension "brand"
            applicationIdSuffix ".xiaomi"
            versionCode 2
            versionName "1.0.1"
            buildConfigField 'String', 'brand_id', '"xiaomi"'
            signingConfig signingConfigs.normalConfig
        }

        huawei {
            dimension "brand"
            applicationIdSuffix ".huawei"
            versionCode 1
            versionName "1.0"
            buildConfigField "String", "brand_id", '"huawei"'
            signingConfig signingConfigs.normalConfig
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    /*lintOptions {
        abortOnError false
        checkReleaseBuilds true
    }*/

    kotlinOptions {
        jvmTarget = '17'
    }

    // 开启 dataBinding
    dataBinding {
        enabled = true
    }
}

task deleteHawkyAARs(type: Delete) {
    println("deleteHawkyAARs...")
    delete 'libs/hawkybase-release.aar',
            'libs/hawkysdk-realm-release.aar'
}

task buildHawkyAARs() {
    println("buildHawkyAARs...")
    // 输出aar路径：build/outputs/aar
    dependsOn(':hawkybase:assemble')
    dependsOn(':hawkysdk-realm:assembleRelease')
}

task copyAARsToLibs() {
    // copy aar 至 ..app/libs/ 目录下
    println("copyAARsToLibs ...")
    dependsOn(':hawkybase:copyReleaseToHawkyApp')
    dependsOn(':hawkysdk-realm:copyReleaseToHawkyApp')
}

dependencies {
    // 引入aar包，一行搞定
    implementation(fileTree("libs"))

    implementation "androidx.core:core-ktx:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'com.android.support:multidex:1.0.3'
    // Hawky libraries as projects (for development only)
    implementation project(path: ':hawkybase')
    implementation project(path: ':hawkysdk-realm')
    //*/
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}